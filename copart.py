import asyncio
from selenium import webdriver
import time
from selenium.webdriver.common.by import By
import re
from selenium.webdriver.chrome.options import Options

def scrape_copart_page(url: str):
    options = Options()
    options.add_argument("--headless")
    options.add_argument("--disable-gpu")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-burl-features=AutomationControlled")
    options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36")

    driver = webdriver.Chrome(options=options)
    try:
        driver.get(url)
        time.sleep(8)
        
        page_html = driver.page_source
        with open("saved_page.html", "w", encoding="utf-8") as f:
            f.write(page_html)  # Wait for the page to load

        details = {
            "üöó –ù–∞–∑–≤–∞ –∞–≤—Ç–æ": "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
            "üìÑ –î–æ–∫—É–º–µ–Ω—Ç–∏": "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
            "üìÖ –†—ñ–∫": "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
            "üìè –ü—Ä–æ–±—ñ–≥": "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
            "‚öôÔ∏è –ü—Ä–∏–≤—ñ–¥": "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
            "‚õΩ –¢–∏–ø –ø–∞–ª–∏–≤–∞": "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
            "üõ†Ô∏è –î–≤–∏–≥—É–Ω": "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
            "üìç –õ–æ–∫–∞—Ü—ñ—è": "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
            "üåü –°—Ç–∞–Ω –∞–≤—Ç–æ": "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
        }

    
        try:
            car_name_element = driver.find_element(By.CLASS_NAME, "title.my-0.mr-10")
            details["üöó –ù–∞–∑–≤–∞ –∞–≤—Ç–æ"] = car_name_element.text
        except:
            pass

        try:
            title_element = driver.find_element(By.XPATH, "//*[contains(text(), 'Title code')]/following-sibling::span")
            details["üìÑ –î–æ–∫—É–º–µ–Ω—Ç–∏"] = title_element.text.strip()
        except:
            pass

        if details["üöó –ù–∞–∑–≤–∞ –∞–≤—Ç–æ"]:
            year_match = re.search(r'\b(19|20)\d{2}\b', details["üöó –ù–∞–∑–≤–∞ –∞–≤—Ç–æ"])
            if year_match:
                details["üìÖ –†—ñ–∫"] = year_match.group(0)

        try:
            odometer_element = driver.find_element(By.XPATH, "//*[contains(text(), 'Odometer')]/following-sibling::*")
            details["üìè –ü—Ä–æ–±—ñ–≥"] = odometer_element.text
        except:
            pass

        try:
            drive_element = driver.find_element(By.XPATH, "//*[contains(text(), 'Drive')]/following-sibling::*")
            details["‚öôÔ∏è –ü—Ä–∏–≤—ñ–¥"] = drive_element.text
        except:
            pass

        try:
            fuel_element = driver.find_element(By.XPATH, "//*[contains(text(), 'Fuel')]/following-sibling::*")
            details["‚õΩ –¢–∏–ø –ø–∞–ª–∏–≤–∞"] = fuel_element.text
        except:
            pass

        try:
            engine_element = driver.find_element(By.XPATH, "//*[contains(text(), 'Engine type')]/following-sibling::*")
            engine_text = engine_element.text.strip()
            details["üõ†Ô∏è –î–≤–∏–≥—É–Ω"] = engine_text  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç –¥–≤–∏–≥—É–Ω–∞
            
            # –†–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è –ø–æ—à—É–∫—É –ø–µ—Ä—à–æ–≥–æ —á–∏—Å–ª–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ 2.5 –∞–±–æ 2,5
            match = re.search(r"(\d+[.,]\d+)", engine_text)
            
            if match:
                try:
                    engine_volume = float(match.group(1).replace(",", ".")) * 1000
                except ValueError:
                    pass
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –¥–≤–∏–≥—É–Ω: {str(e)}")
            pass

        try:
            sale_location_element = driver.find_element(By.XPATH, "//*[contains(text(), 'Sale location')]/following-sibling::*")
            details["üìç –õ–æ–∫–∞—Ü—ñ—è"] = sale_location_element.text
        except:
            pass

        try:
            highlights_element = driver.find_element(By.XPATH, "//*[contains(text(), 'Highlights')]/following-sibling::*")
            details["üåü –°—Ç–∞–Ω –∞–≤—Ç–æ"] = highlights_element.text
        except:
            pass

        return details
    except Exception as e:
        return {"error": f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}"}
    finally:
        driver.quit()


async def fetch_car_info_copart(url):
    loop = asyncio.get_running_loop()
    details = await loop.run_in_executor(None, scrape_copart_page, url)
    return details